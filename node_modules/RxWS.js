var Rx = require('Rx');

function RxWebSocket(ws) {
  var isClosed = false;

  var socket = Rx.Observable.create(function(observer) {
    function onmessage (msg) {
      observer.onNext(JSON.parse(msg));
    }

    function onerror() {
      isClosed = true;
      observer.onError();
    }

    function onclose() {
      isClosed = true;
      observer.onCompleted();
    }

    if (isClosed) {
      // Immediately complete the stream if it's already closed
      // TODO: Schedule this appropriately
      observer.onCompleted();
      return;
    }
    if (ws.on) {
      // This is the API for this ws library in node
      ws.on('message', onmessage);
      ws.on('error', onerror);
      ws.on('close', onclose)
    } else {
      // This is the API for DOM WebSockets
      ws.onmessage = onmessage;
      ws.onerror = onerror;
      ws.onclose = onclose;
    }

    return function () {
      isClosed = true;
      ws.close();
    };
  }).share(); // Keep one, single connection alive

  socket.onNext = function(message) {
    ws.send(JSON.stringify(message));
  };

  socket.onCompleted = socket.onError = function() {
    isClosed = true;
    ws.close();
  };

  return socket;
};


exports.RxWebSocket = RxWebSocket;

exports.RxWebSocketServer = function(options) {
  var wsServer = require('ws').Server;
  return Rx.Observable.create(function(observer) {
    var wss = new wsServer(options);
    wss.on('connection', observer.onNext.bind(observer));
    wss.on('error', observer.onError.bind(observer));

    return function() {
      wss.close();
    };
  }).select(RxWebSocket).share();
}

