var Rx = require('Rx');
exports.deepCopy = function(o) {
  return JSON.parse(JSON.stringify(o));
}

exports.notEmpty = function(o) {
  return o != null;
}

exports.timestamp = function(stream, f) {
  return Rx.Observable.create(function(observer) {
    stream.subscribe(
      function(value) {observer.onNext(f(Date.now(), value))},
      function() {observer.onError()},
      function() {observer.onCompleted()},
      // Use immediate scheduler, since this is time-sensitive
      Rx.Scheduler.immediate
    );

  }).share();
}

function Msg(key, value) {
  return {key: key, value: value};
}

Msg.filter = function(key){
  return function(msg) {
    return msg.key == key;
  }
};

Msg.value = function(msg) {
  return msg.value;
}

Msg.recv = function(stream) {
  return function(key) {
    return stream.filter(Msg.filter(key)).map(Msg.value).share();
  }
}

exports.Msg = Msg;
