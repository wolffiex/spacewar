var Rx = require('Rx');
var wsServer = require('ws').Server;

function RxWebSocket(ws) {
  var connection = Rx.Observable.create(function(observer) {
    if (connection.isClosed) {
      // Immediately complete the stream if it's already closed
      // TODO: Schedule this appropriately
      observer.onCompleted();
      return;
    }
    ws.on('message', function(msg) {
      observer.onNext(JSON.parse(msg));
    });
    ws.on('error', function() {
      connection.isClosed = true;
      observer.onError();
    });
    ws.on('close', function() {
      connection.isClosed = true;
      observer.onCompleted();
    });

    return function () {
      connection.isClosed = true;
      ws.close();
    };
  }).share(); // Keep one, single connection alive

  connection.onNext = function(message) {
    ws.send(JSON.stringify(message));
  };

  connection.onError = function() {
    connection.isClosed = true;
    ws.close();
  }

  connection.onCompleted = function() {
    connection.isClosed = true;
    ws.close();
  };

  return connection;
};


module.exports = function(options) {
  return Rx.Observable.create(function(observer) {
    var wss = new wsServer(options);
    wss.on('connection', observer.onNext.bind(observer));
    wss.on('error', observer.onError.bind(observer));

    return function() {
      wss.close();
    };
  }).select(RxWebSocket).share();
}

